/**
 * Tests de S√©curit√© pour Africa Suite Pulse
 * Suite compl√®te de tests de s√©curit√© pour la production
 */

import { 
  SecureKeyGenerator, 
  SecureEncryption, 
  SecureSessionManager, 
  BruteForceProtection,
  InputSanitizer,
  SecurityLogger 
} from '../security/production-security';

/**
 * Interface pour les r√©sultats de tests
 */
interface TestResult {
  name: string;
  passed: boolean;
  message: string;
  duration: number;
}

/**
 * Classe principale pour les tests de s√©curit√©
 */
export class SecurityTestSuite {
  private results: TestResult[] = [];

  /**
   * Ex√©cute tous les tests de s√©curit√©
   */
  async runAllTests(): Promise<TestResult[]> {
    console.log('üîí D√©marrage des tests de s√©curit√© Africa Suite Pulse...');
    
    this.results = [];
    
    // Tests de g√©n√©ration de cl√©s
    await this.testKeyGeneration();
    
    // Tests de chiffrement
    await this.testEncryption();
    
    // Tests de gestion des sessions
    await this.testSessionManagement();
    
    // Tests de protection contre la force brute
    await this.testBruteForceProtection();
    
    // Tests de validation des entr√©es
    await this.testInputValidation();
    
    // Tests de logging de s√©curit√©
    await this.testSecurityLogging();
    
    // Tests de r√©sistance aux attaques
    await this.testAttackResistance();
    
    this.generateReport();
    return this.results;
  }

  /**
   * Tests de g√©n√©ration de cl√©s s√©curis√©es
   */
  private async testKeyGeneration(): Promise<void> {
    await this.runTest('G√©n√©ration de cl√©s s√©curis√©es', () => {
      // Test de g√©n√©ration de cl√©
      const key1 = SecureKeyGenerator.generateSecureKey(32);
      const key2 = SecureKeyGenerator.generateSecureKey(32);
      
      if (key1.length !== 64) throw new Error('Longueur de cl√© incorrecte');
      if (key1 === key2) throw new Error('Les cl√©s ne sont pas uniques');
      if (!/^[0-9a-f]+$/.test(key1)) throw new Error('Format de cl√© invalide');
      
      // Test de g√©n√©ration de token CSRF
      const csrfToken = SecureKeyGenerator.generateCSRFToken();
      if (csrfToken.length !== 64) throw new Error('Longueur de token CSRF incorrecte');
      
      // Test de g√©n√©ration de salt
      const salt = SecureKeyGenerator.generateSalt();
      if (salt.length !== 64) throw new Error('Longueur de salt incorrecte');
      
      return 'G√©n√©ration de cl√©s s√©curis√©es r√©ussie';
    });
  }

  /**
   * Tests de chiffrement et d√©chiffrement
   */
  private async testEncryption(): Promise<void> {
    await this.runTest('Chiffrement et d√©chiffrement', () => {
      const originalData = 'Donn√©es sensibles Africa Suite Pulse üîí';
      
      // Test de chiffrement
      const encrypted = SecureEncryption.encrypt(originalData);
      if (encrypted === originalData) throw new Error('Les donn√©es ne sont pas chiffr√©es');
      
      // Test de d√©chiffrement
      const decrypted = SecureEncryption.decrypt(encrypted);
      if (decrypted !== originalData) throw new Error('√âchec du d√©chiffrement');
      
      // Test de hachage de mot de passe
      const password = 'MotDePasseSecurise123!';
      const { hash, salt } = SecureEncryption.hashPassword(password);
      
      if (!hash || !salt) throw new Error('√âchec du hachage');
      if (hash === password) throw new Error('Le mot de passe n\'est pas hach√©');
      
      // Test de v√©rification de mot de passe
      const isValid = SecureEncryption.verifyPassword(password, hash, salt);
      if (!isValid) throw new Error('√âchec de la v√©rification du mot de passe');
      
      const isInvalid = SecureEncryption.verifyPassword('MauvaisMotDePasse', hash, salt);
      if (isInvalid) throw new Error('Validation incorrecte du mauvais mot de passe');
      
      return 'Chiffrement et hachage fonctionnels';
    });
  }

  /**
   * Tests de gestion des sessions
   */
  private async testSessionManagement(): Promise<void> {
    await this.runTest('Gestion des sessions', () => {
      const userId = 'test-user-123';
      const userData = { name: 'Test User', role: 'admin' };
      
      // Test de cr√©ation de session
      const csrfToken = SecureSessionManager.createSession(userId, userData);
      if (!csrfToken) throw new Error('√âchec de cr√©ation de session');
      
      // Test de r√©cup√©ration de session
      const session = SecureSessionManager.getSession();
      if (!session) throw new Error('√âchec de r√©cup√©ration de session');
      if (session.userId !== userId) throw new Error('Donn√©es de session incorrectes');
      
      // Test de v√©rification CSRF
      const isValidCSRF = SecureSessionManager.verifyCSRFToken(csrfToken);
      if (!isValidCSRF) throw new Error('√âchec de v√©rification CSRF');
      
      const isInvalidCSRF = SecureSessionManager.verifyCSRFToken('invalid-token');
      if (isInvalidCSRF) throw new Error('Validation CSRF incorrecte');
      
      // Test de renouvellement de session
      const renewed = SecureSessionManager.renewSession();
      if (!renewed) throw new Error('√âchec de renouvellement de session');
      
      // Test de destruction de session
      SecureSessionManager.destroySession();
      const destroyedSession = SecureSessionManager.getSession();
      if (destroyedSession) throw new Error('√âchec de destruction de session');
      
      return 'Gestion des sessions s√©curis√©e';
    });
  }

  /**
   * Tests de protection contre la force brute
   */
  private async testBruteForceProtection(): Promise<void> {
    await this.runTest('Protection contre la force brute', () => {
      const testIdentifier = 'test@example.com';
      
      // R√©initialisation initiale
      BruteForceProtection.resetAttempts(testIdentifier);
      
      // Test d'√©tat initial
      if (BruteForceProtection.isAccountLocked(testIdentifier)) {
        throw new Error('Le compte ne devrait pas √™tre verrouill√© initialement');
      }
      
      // Test d'enregistrement des tentatives √©chou√©es
      for (let i = 0; i < 4; i++) {
        BruteForceProtection.recordFailedAttempt(testIdentifier);
        if (BruteForceProtection.isAccountLocked(testIdentifier)) {
          throw new Error('Le compte ne devrait pas √™tre verrouill√© avant 5 tentatives');
        }
      }
      
      // Cinqui√®me tentative - devrait verrouiller
      BruteForceProtection.recordFailedAttempt(testIdentifier);
      if (!BruteForceProtection.isAccountLocked(testIdentifier)) {
        throw new Error('Le compte devrait √™tre verrouill√© apr√®s 5 tentatives');
      }
      
      // Test de r√©initialisation
      BruteForceProtection.resetAttempts(testIdentifier);
      if (BruteForceProtection.isAccountLocked(testIdentifier)) {
        throw new Error('Le compte devrait √™tre d√©verrouill√© apr√®s r√©initialisation');
      }
      
      return 'Protection contre la force brute active';
    });
  }

  /**
   * Tests de validation des entr√©es
   */
  private async testInputValidation(): Promise<void> {
    await this.runTest('Validation des entr√©es', () => {
      // Test de nettoyage des cha√Ænes
      const maliciousInput = '<script>alert("XSS")</script>Hello';
      const sanitized = InputSanitizer.sanitizeString(maliciousInput);
      if (sanitized.includes('<script>')) throw new Error('√âchec du nettoyage XSS');
      
      // Test de validation d'email
      const validEmail = 'user@africasuite.com';
      const invalidEmail = 'invalid-email';
      
      if (!InputSanitizer.validateEmail(validEmail)) {
        throw new Error('Email valide rejet√©');
      }
      if (InputSanitizer.validateEmail(invalidEmail)) {
        throw new Error('Email invalide accept√©');
      }
      
      // Test de validation de mot de passe
      const strongPassword = 'StrongPass123!';
      const weakPassword = '123';
      
      const strongResult = InputSanitizer.validatePassword(strongPassword);
      if (!strongResult.isValid) {
        throw new Error('Mot de passe fort rejet√©: ' + strongResult.errors.join(', '));
      }
      
      const weakResult = InputSanitizer.validatePassword(weakPassword);
      if (weakResult.isValid) {
        throw new Error('Mot de passe faible accept√©');
      }
      
      // Test de validation de t√©l√©phone africain
      const validPhone = '+2250123456789';
      const invalidPhone = '+1234567890';
      
      if (!InputSanitizer.validateAfricanPhone(validPhone)) {
        throw new Error('Num√©ro africain valide rejet√©');
      }
      if (InputSanitizer.validateAfricanPhone(invalidPhone)) {
        throw new Error('Num√©ro non-africain accept√©');
      }
      
      return 'Validation des entr√©es s√©curis√©e';
    });
  }

  /**
   * Tests de logging de s√©curit√©
   */
  private async testSecurityLogging(): Promise<void> {
    await this.runTest('Logging de s√©curit√©', () => {
      // Test d'enregistrement d'√©v√©nement
      const testEvent = 'test_security_event';
      const testDetails = { test: true, timestamp: Date.now() };
      
      // Ceci devrait fonctionner sans erreur
      SecurityLogger.logSecurityEvent(testEvent, testDetails);
      
      return 'Logging de s√©curit√© fonctionnel';
    });
  }

  /**
   * Tests de r√©sistance aux attaques
   */
  private async testAttackResistance(): Promise<void> {
    await this.runTest('R√©sistance aux attaques', () => {
      // Test de r√©sistance aux injections SQL (simulation)
      const sqlInjection = "'; DROP TABLE users; --";
      const sanitizedSQL = InputSanitizer.sanitizeString(sqlInjection);
      if (sanitizedSQL.includes('DROP TABLE')) {
        throw new Error('Vuln√©rabilit√© √† l\'injection SQL d√©tect√©e');
      }
      
      // Test de r√©sistance aux attaques XSS
      const xssPayload = '<img src="x" onerror="alert(1)">';
      const sanitizedXSS = InputSanitizer.sanitizeString(xssPayload);
      if (sanitizedXSS.includes('onerror')) {
        throw new Error('Vuln√©rabilit√© XSS d√©tect√©e');
      }
      
      // Test de r√©sistance aux attaques CSRF (simulation)
      const validCSRF = SecureSessionManager.createSession('test', {});
      const invalidCSRF = 'fake-csrf-token';
      
      if (SecureSessionManager.verifyCSRFToken(invalidCSRF)) {
        throw new Error('Vuln√©rabilit√© CSRF d√©tect√©e');
      }
      
      return 'R√©sistance aux attaques confirm√©e';
    });
  }

  /**
   * Ex√©cute un test individuel
   */
  private async runTest(name: string, testFunction: () => string): Promise<void> {
    const startTime = performance.now();
    
    try {
      const message = testFunction();
      const duration = performance.now() - startTime;
      
      this.results.push({
        name,
        passed: true,
        message,
        duration
      });
      
      console.log(`‚úÖ ${name}: ${message} (${duration.toFixed(2)}ms)`);
    } catch (error) {
      const duration = performance.now() - startTime;
      const message = error instanceof Error ? error.message : 'Erreur inconnue';
      
      this.results.push({
        name,
        passed: false,
        message,
        duration
      });
      
      console.error(`‚ùå ${name}: ${message} (${duration.toFixed(2)}ms)`);
    }
  }

  /**
   * G√©n√®re un rapport de tests
   */
  private generateReport(): void {
    const totalTests = this.results.length;
    const passedTests = this.results.filter(r => r.passed).length;
    const failedTests = totalTests - passedTests;
    const totalDuration = this.results.reduce((sum, r) => sum + r.duration, 0);
    
    console.log('\nüîí RAPPORT DE S√âCURIT√â AFRICA SUITE PULSE');
    console.log('==========================================');
    console.log(`Tests ex√©cut√©s: ${totalTests}`);
    console.log(`Tests r√©ussis: ${passedTests}`);
    console.log(`Tests √©chou√©s: ${failedTests}`);
    console.log(`Dur√©e totale: ${totalDuration.toFixed(2)}ms`);
    console.log(`Taux de r√©ussite: ${((passedTests / totalTests) * 100).toFixed(1)}%`);
    
    if (failedTests > 0) {
      console.log('\n‚ùå TESTS √âCHOU√âS:');
      this.results
        .filter(r => !r.passed)
        .forEach(r => console.log(`  - ${r.name}: ${r.message}`));
    }
    
    if (passedTests === totalTests) {
      console.log('\nüéâ TOUS LES TESTS DE S√âCURIT√â SONT PASS√âS !');
      console.log('Africa Suite Pulse est pr√™t pour la production.');
    } else {
      console.log('\n‚ö†Ô∏è  ATTENTION: Des probl√®mes de s√©curit√© ont √©t√© d√©tect√©s.');
      console.log('Veuillez corriger les erreurs avant le d√©ploiement en production.');
    }
  }

  /**
   * Exporte les r√©sultats au format JSON
   */
  exportResults(): string {
    return JSON.stringify({
      timestamp: new Date().toISOString(),
      application: 'Africa Suite Pulse',
      version: '1.0.0',
      environment: 'test',
      summary: {
        total: this.results.length,
        passed: this.results.filter(r => r.passed).length,
        failed: this.results.filter(r => !r.passed).length,
        duration: this.results.reduce((sum, r) => sum + r.duration, 0)
      },
      results: this.results
    }, null, 2);
  }
}

/**
 * Tests de performance de s√©curit√©
 */
export class SecurityPerformanceTests {
  /**
   * Test de performance du chiffrement
   */
  static async testEncryptionPerformance(): Promise<number> {
    const testData = 'A'.repeat(1000); // 1KB de donn√©es
    const iterations = 1000;
    
    const startTime = performance.now();
    
    for (let i = 0; i < iterations; i++) {
      const encrypted = SecureEncryption.encrypt(testData);
      SecureEncryption.decrypt(encrypted);
    }
    
    const endTime = performance.now();
    const avgTime = (endTime - startTime) / iterations;
    
    console.log(`Performance chiffrement: ${avgTime.toFixed(2)}ms par op√©ration`);
    return avgTime;
  }

  /**
   * Test de performance du hachage
   */
  static async testHashingPerformance(): Promise<number> {
    const password = 'TestPassword123!';
    const iterations = 100;
    
    const startTime = performance.now();
    
    for (let i = 0; i < iterations; i++) {
      SecureEncryption.hashPassword(password);
    }
    
    const endTime = performance.now();
    const avgTime = (endTime - startTime) / iterations;
    
    console.log(`Performance hachage: ${avgTime.toFixed(2)}ms par op√©ration`);
    return avgTime;
  }
}

/**
 * Fonction principale pour ex√©cuter tous les tests
 */
export async function runSecurityTests(): Promise<TestResult[]> {
  const testSuite = new SecurityTestSuite();
  const results = await testSuite.runAllTests();
  
  // Tests de performance
  console.log('\n‚ö° TESTS DE PERFORMANCE:');
  await SecurityPerformanceTests.testEncryptionPerformance();
  await SecurityPerformanceTests.testHashingPerformance();
  
  return results;
}

// Export par d√©faut
export default SecurityTestSuite;

