/**
 * Syst√®me d'Agents Manus Avanc√©s
 * Orchestration intelligente avec IA int√©gr√©e pour Africa Suite Pulse
 */

import { createClient } from '@supabase/supabase-js'

// Types pour les agents
export interface ManusAgent {
  id: string
  name: string
  description: string
  type: 'analysis' | 'optimization' | 'automation' | 'prediction' | 'reporting'
  status: 'idle' | 'running' | 'completed' | 'error'
  capabilities: string[]
  lastRun: Date | null
  nextScheduledRun: Date | null
  config: Record<string, any>
  metrics: AgentMetrics
}

export interface AgentMetrics {
  totalRuns: number
  successRate: number
  averageExecutionTime: number
  lastExecutionTime: number
  errorCount: number
  impactScore: number
}

export interface AgentTask {
  id: string
  agentId: string
  type: string
  input: any
  output?: any
  status: 'pending' | 'running' | 'completed' | 'failed'
  startTime?: Date
  endTime?: Date
  error?: string
  priority: 'low' | 'medium' | 'high' | 'critical'
}

export interface AgentResult {
  success: boolean
  data?: any
  error?: string
  metrics?: {
    executionTime: number
    resourcesUsed: number
    confidence: number
  }
  recommendations?: string[]
  actions?: AgentAction[]
}

export interface AgentAction {
  type: 'notification' | 'update' | 'create' | 'delete' | 'optimize'
  target: string
  payload: any
  scheduled?: Date
}

// Configuration des agents sp√©cialis√©s
const AFRICAN_AGENTS_CONFIG = {
  // Agent d'Analyse des Ventes
  salesAnalyst: {
    id: 'sales-analyst',
    name: 'Analyste des Ventes Africain',
    description: 'Analyse les tendances de vente et identifie les opportunit√©s',
    type: 'analysis' as const,
    capabilities: [
      'Analyse des tendances saisonni√®res africaines',
      'D√©tection des plats populaires par r√©gion',
      'Pr√©diction de la demande selon les √©v√©nements locaux',
      'Optimisation du menu selon les pr√©f√©rences culturelles'
    ],
    schedule: '0 0 8 * * *', // Tous les jours √† 8h
    config: {
      analysisDepth: 'deep',
      culturalContext: 'west-africa',
      currencies: ['XOF', 'XAF', 'GHS', 'NGN'],
      seasonalFactors: true
    }
  },

  // Agent d'Optimisation des Prix
  pricingOptimizer: {
    id: 'pricing-optimizer',
    name: 'Optimiseur de Prix Intelligent',
    description: 'Optimise les prix selon le march√© africain et la demande',
    type: 'optimization' as const,
    capabilities: [
      'Analyse concurrentielle locale',
      'Ajustement selon le pouvoir d\'achat r√©gional',
      'Optimisation des marges par produit',
      'Strat√©gies de prix pour √©v√©nements sp√©ciaux'
    ],
    schedule: '0 0 6 * * 1', // Tous les lundis √† 6h
    config: {
      maxPriceIncrease: 0.15, // 15% max
      minMargin: 0.25, // 25% marge minimum
      marketFactors: ['competition', 'seasonality', 'events'],
      regionalAdjustment: true
    }
  },

  // Agent de Maintenance Pr√©dictive
  maintenancePredictor: {
    id: 'maintenance-predictor',
    name: 'Pr√©dicteur de Maintenance',
    description: 'Pr√©dit les besoins de maintenance et optimise les op√©rations',
    type: 'prediction' as const,
    capabilities: [
      'Pr√©diction des pannes d\'√©quipement',
      'Optimisation des stocks selon la demande',
      'Planification de la maintenance pr√©ventive',
      'Alertes de r√©approvisionnement intelligent'
    ],
    schedule: '0 0 */6 * * *', // Toutes les 6 heures
    config: {
      predictionHorizon: 30, // 30 jours
      confidenceThreshold: 0.8,
      alertThresholds: {
        stock: 0.2, // 20% du stock
        equipment: 0.7 // 70% de probabilit√© de panne
      }
    }
  },

  // Agent de G√©n√©ration de Rapports
  reportGenerator: {
    id: 'report-generator',
    name: 'G√©n√©rateur de Rapports Intelligents',
    description: 'G√©n√®re des rapports personnalis√©s avec insights IA',
    type: 'reporting' as const,
    capabilities: [
      'Rapports financiers avec analyse culturelle',
      'Tableaux de bord personnalis√©s par r√©gion',
      'Insights pr√©dictifs pour la direction',
      'Rapports de conformit√© automatis√©s'
    ],
    schedule: '0 0 7 * * 1', // Tous les lundis √† 7h
    config: {
      reportTypes: ['financial', 'operational', 'predictive'],
      languages: ['fr', 'en'],
      formats: ['pdf', 'excel', 'dashboard'],
      culturalInsights: true
    }
  },

  // Agent d'Automatisation des Processus
  processAutomator: {
    id: 'process-automator',
    name: 'Automatiseur de Processus',
    description: 'Automatise les t√¢ches r√©p√©titives et optimise les workflows',
    type: 'automation' as const,
    capabilities: [
      'Automatisation des commandes r√©currentes',
      'Gestion intelligente des stocks',
      'Notifications contextuelles aux clients',
      'Optimisation des horaires de service'
    ],
    schedule: '0 */15 * * * *', // Toutes les 15 minutes
    config: {
      automationLevel: 'smart',
      humanApprovalRequired: ['pricing', 'inventory-orders'],
      notificationChannels: ['email', 'sms', 'whatsapp'],
      workflowOptimization: true
    }
  }
}

export class ManusAgentSystem {
  private agents: Map<string, ManusAgent> = new Map()
  private taskQueue: AgentTask[] = []
  private isRunning: boolean = false
  private supabaseClient?: any
  private manusApiKey?: string

  constructor(config?: {
    supabaseUrl?: string
    supabaseKey?: string
    manusApiKey?: string
  }) {
    if (config?.supabaseUrl && config?.supabaseKey) {
      this.supabaseClient = createClient(config.supabaseUrl, config.supabaseKey)
    }
    this.manusApiKey = config?.manusApiKey || process.env.OPENAI_API_KEY
    this.initializeAgents()
  }

  private initializeAgents() {
    Object.values(AFRICAN_AGENTS_CONFIG).forEach(config => {
      const agent: ManusAgent = {
        ...config,
        status: 'idle',
        lastRun: null,
        nextScheduledRun: this.calculateNextRun(config.schedule),
        metrics: {
          totalRuns: 0,
          successRate: 0,
          averageExecutionTime: 0,
          lastExecutionTime: 0,
          errorCount: 0,
          impactScore: 0
        }
      }
      this.agents.set(agent.id, agent)
    })

    console.log(`ü§ñ ${this.agents.size} agents Manus initialis√©s`)
  }

  private calculateNextRun(cronExpression: string): Date {
    // Simulation simple du calcul de prochaine ex√©cution
    // En production, utiliser une vraie librairie cron
    const now = new Date()
    const nextRun = new Date(now.getTime() + 60 * 60 * 1000) // +1 heure pour la d√©mo
    return nextRun
  }

  // D√©marrer le syst√®me d'agents
  public async start(): Promise<void> {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è Syst√®me d\'agents d√©j√† en cours d\'ex√©cution')
      return
    }

    this.isRunning = true
    console.log('üöÄ D√©marrage du syst√®me d\'agents Manus...')

    // Boucle principale d'orchestration
    this.orchestrationLoop()
  }

  // Arr√™ter le syst√®me d'agents
  public async stop(): Promise<void> {
    this.isRunning = false
    console.log('üõë Arr√™t du syst√®me d\'agents Manus')
  }

  // Boucle d'orchestration principale
  private async orchestrationLoop(): Promise<void> {
    while (this.isRunning) {
      try {
        // V√©rifier les agents programm√©s
        await this.checkScheduledAgents()
        
        // Traiter la queue des t√¢ches
        await this.processTaskQueue()
        
        // Attendre avant la prochaine it√©ration
        await new Promise(resolve => setTimeout(resolve, 30000)) // 30 secondes
      } catch (error) {
        console.error('‚ùå Erreur dans la boucle d\'orchestration:', error)
        await new Promise(resolve => setTimeout(resolve, 60000)) // 1 minute en cas d'erreur
      }
    }
  }

  // V√©rifier les agents programm√©s
  private async checkScheduledAgents(): Promise<void> {
    const now = new Date()
    
    for (const [agentId, agent] of this.agents) {
      if (agent.nextScheduledRun && now >= agent.nextScheduledRun && agent.status === 'idle') {
        console.log(`‚è∞ Ex√©cution programm√©e de l'agent ${agent.name}`)
        await this.executeAgent(agentId)
      }
    }
  }

  // Traiter la queue des t√¢ches
  private async processTaskQueue(): Promise<void> {
    const pendingTasks = this.taskQueue.filter(task => task.status === 'pending')
    
    // Trier par priorit√©
    pendingTasks.sort((a, b) => {
      const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 }
      return priorityOrder[b.priority] - priorityOrder[a.priority]
    })

    // Traiter les t√¢ches une par une (en production, parall√©liser selon les ressources)
    for (const task of pendingTasks.slice(0, 3)) { // Max 3 t√¢ches simultan√©es
      await this.executeTask(task)
    }
  }

  // Ex√©cuter un agent
  public async executeAgent(agentId: string, input?: any): Promise<AgentResult> {
    const agent = this.agents.get(agentId)
    if (!agent) {
      throw new Error(`Agent ${agentId} non trouv√©`)
    }

    if (agent.status === 'running') {
      throw new Error(`Agent ${agent.name} d√©j√† en cours d'ex√©cution`)
    }

    const startTime = Date.now()
    agent.status = 'running'
    this.agents.set(agentId, agent)

    try {
      console.log(`ü§ñ Ex√©cution de l'agent ${agent.name}...`)
      
      let result: AgentResult
      
      // Dispatcher selon le type d'agent
      switch (agent.id) {
        case 'sales-analyst':
          result = await this.executeSalesAnalyst(input)
          break
        case 'pricing-optimizer':
          result = await this.executePricingOptimizer(input)
          break
        case 'maintenance-predictor':
          result = await this.executeMaintenancePredictor(input)
          break
        case 'report-generator':
          result = await this.executeReportGenerator(input)
          break
        case 'process-automator':
          result = await this.executeProcessAutomator(input)
          break
        default:
          throw new Error(`Type d'agent ${agent.id} non support√©`)
      }

      // Mettre √† jour les m√©triques
      const executionTime = Date.now() - startTime
      agent.metrics.totalRuns++
      agent.metrics.lastExecutionTime = executionTime
      agent.metrics.averageExecutionTime = 
        (agent.metrics.averageExecutionTime * (agent.metrics.totalRuns - 1) + executionTime) / agent.metrics.totalRuns
      
      if (result.success) {
        agent.metrics.successRate = 
          (agent.metrics.successRate * (agent.metrics.totalRuns - 1) + 1) / agent.metrics.totalRuns
      } else {
        agent.metrics.errorCount++
        agent.metrics.successRate = 
          (agent.metrics.successRate * (agent.metrics.totalRuns - 1)) / agent.metrics.totalRuns
      }

      agent.status = result.success ? 'completed' : 'error'
      agent.lastRun = new Date()
      agent.nextScheduledRun = this.calculateNextRun(AFRICAN_AGENTS_CONFIG[agentId as keyof typeof AFRICAN_AGENTS_CONFIG].schedule)

      this.agents.set(agentId, agent)

      // Ex√©cuter les actions recommand√©es
      if (result.actions) {
        await this.executeActions(result.actions)
      }

      console.log(`‚úÖ Agent ${agent.name} termin√© avec succ√®s (${executionTime}ms)`)
      return result

    } catch (error) {
      const executionTime = Date.now() - startTime
      agent.status = 'error'
      agent.metrics.errorCount++
      agent.metrics.lastExecutionTime = executionTime
      
      this.agents.set(agentId, agent)
      
      console.error(`‚ùå Erreur dans l'agent ${agent.name}:`, error)
      
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue',
        metrics: {
          executionTime,
          resourcesUsed: 0,
          confidence: 0
        }
      }
    }
  }

  // Agent d'analyse des ventes
  private async executeSalesAnalyst(input?: any): Promise<AgentResult> {
    try {
      // R√©cup√©rer les donn√©es de vente
      const salesData = await this.getSalesData()
      
      // Analyser avec l'IA Manus
      const analysis = await this.callManusAI({
        prompt: `Analysez ces donn√©es de vente d'un restaurant africain et fournissez des insights culturellement pertinents:
        
        Donn√©es: ${JSON.stringify(salesData)}
        
        Analysez:
        1. Tendances saisonni√®res africaines
        2. Plats populaires par r√©gion
        3. Impact des √©v√©nements culturels/religieux
        4. Opportunit√©s d'optimisation du menu
        5. Pr√©dictions pour les 30 prochains jours
        
        R√©pondez en JSON avec: insights, recommendations, predictions`,
        maxTokens: 1000
      })

      const recommendations = [
        'Optimiser le menu selon les pr√©f√©rences r√©gionales identifi√©es',
        'Ajuster les stocks pour les √©v√©nements culturels √† venir',
        'Promouvoir les plats traditionnels pendant les p√©riodes favorables'
      ]

      const actions: AgentAction[] = [
        {
          type: 'notification',
          target: 'management',
          payload: {
            title: 'Analyse des Ventes Compl√©t√©e',
            message: 'Nouveaux insights disponibles sur les tendances de vente',
            data: analysis
          }
        }
      ]

      return {
        success: true,
        data: analysis,
        recommendations,
        actions,
        metrics: {
          executionTime: 2500,
          resourcesUsed: 0.3,
          confidence: 0.85
        }
      }
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur d\'analyse des ventes'
      }
    }
  }

  // Agent d'optimisation des prix
  private async executePricingOptimizer(input?: any): Promise<AgentResult> {
    try {
      const productsData = await this.getProductsData()
      const marketData = await this.getMarketData()

      const optimization = await this.callManusAI({
        prompt: `Optimisez les prix de ces produits pour un restaurant africain:
        
        Produits actuels: ${JSON.stringify(productsData)}
        Donn√©es march√©: ${JSON.stringify(marketData)}
        
        Consid√©rez:
        1. Pouvoir d'achat local
        2. Concurrence r√©gionale
        3. Co√ªts des mati√®res premi√®res
        4. Saisonnalit√© des ingr√©dients
        5. Marge minimum de 25%
        
        Proposez des ajustements de prix en FCFA avec justifications.`,
        maxTokens: 800
      })

      const actions: AgentAction[] = [
        {
          type: 'update',
          target: 'products',
          payload: {
            priceUpdates: optimization.priceUpdates || []
          }
        }
      ]

      return {
        success: true,
        data: optimization,
        recommendations: [
          'Appliquer les ajustements de prix propos√©s',
          'Surveiller la r√©action des clients aux nouveaux prix',
          'R√©√©valuer dans 2 semaines'
        ],
        actions,
        metrics: {
          executionTime: 3200,
          resourcesUsed: 0.4,
          confidence: 0.78
        }
      }
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur d\'optimisation des prix'
      }
    }
  }

  // Agent de maintenance pr√©dictive
  private async executeMaintenancePredictor(input?: any): Promise<AgentResult> {
    try {
      const equipmentData = await this.getEquipmentData()
      const stockData = await this.getStockData()

      const predictions = await this.callManusAI({
        prompt: `Analysez ces donn√©es d'√©quipement et de stock pour pr√©dire les besoins de maintenance:
        
        √âquipements: ${JSON.stringify(equipmentData)}
        Stocks: ${JSON.stringify(stockData)}
        
        Pr√©disez:
        1. Probabilit√© de panne dans les 30 jours
        2. Besoins de r√©approvisionnement
        3. Maintenance pr√©ventive recommand√©e
        4. Optimisation des stocks selon la demande
        
        Fournissez des alertes prioritaires et un planning de maintenance.`,
        maxTokens: 900
      })

      const actions: AgentAction[] = []
      
      // Ajouter des alertes si n√©cessaire
      if (predictions.criticalAlerts) {
        actions.push({
          type: 'notification',
          target: 'maintenance-team',
          payload: {
            title: 'Alertes de Maintenance Critiques',
            alerts: predictions.criticalAlerts,
            priority: 'high'
          }
        })
      }

      return {
        success: true,
        data: predictions,
        recommendations: [
          'Planifier la maintenance pr√©ventive selon les pr√©dictions',
          'R√©approvisionner les stocks identifi√©s comme critiques',
          'Surveiller les √©quipements √† risque √©lev√©'
        ],
        actions,
        metrics: {
          executionTime: 2800,
          resourcesUsed: 0.35,
          confidence: 0.82
        }
      }
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur de pr√©diction de maintenance'
      }
    }
  }

  // Agent de g√©n√©ration de rapports
  private async executeReportGenerator(input?: any): Promise<AgentResult> {
    try {
      const businessData = await this.getBusinessData()

      const report = await this.callManusAI({
        prompt: `G√©n√©rez un rapport d'activit√© hebdomadaire pour ce restaurant africain:
        
        Donn√©es: ${JSON.stringify(businessData)}
        
        Incluez:
        1. R√©sum√© ex√©cutif avec KPIs
        2. Analyse des performances par cat√©gorie
        3. Insights culturels et saisonniers
        4. Recommandations strat√©giques
        5. Pr√©visions pour la semaine suivante
        
        Format: rapport professionnel en fran√ßais avec m√©triques cl√©s.`,
        maxTokens: 1200
      })

      const actions: AgentAction[] = [
        {
          type: 'create',
          target: 'reports',
          payload: {
            type: 'weekly-business-report',
            content: report,
            recipients: ['management', 'owners'],
            format: 'pdf'
          }
        }
      ]

      return {
        success: true,
        data: report,
        recommendations: [
          'Partager le rapport avec l\'√©quipe de direction',
          'Impl√©menter les recommandations strat√©giques',
          'Programmer une r√©union de suivi'
        ],
        actions,
        metrics: {
          executionTime: 4100,
          resourcesUsed: 0.5,
          confidence: 0.88
        }
      }
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur de g√©n√©ration de rapport'
      }
    }
  }

  // Agent d'automatisation des processus
  private async executeProcessAutomator(input?: any): Promise<AgentResult> {
    try {
      const processData = await this.getProcessData()

      const automation = await this.callManusAI({
        prompt: `Analysez ces processus de restaurant et proposez des automatisations:
        
        Processus actuels: ${JSON.stringify(processData)}
        
        Identifiez:
        1. T√¢ches r√©p√©titives automatisables
        2. Goulots d'√©tranglement dans les workflows
        3. Opportunit√©s d'optimisation
        4. Automatisations prioritaires
        
        Proposez un plan d'automatisation avec impact estim√©.`,
        maxTokens: 1000
      })

      const actions: AgentAction[] = []
      
      // Impl√©menter les automatisations approuv√©es
      if (automation.approvedAutomations) {
        actions.push({
          type: 'optimize',
          target: 'workflows',
          payload: {
            automations: automation.approvedAutomations
          }
        })
      }

      return {
        success: true,
        data: automation,
        recommendations: [
          'Impl√©menter les automatisations prioritaires',
          'Former l\'√©quipe aux nouveaux processus',
          'Mesurer l\'impact des optimisations'
        ],
        actions,
        metrics: {
          executionTime: 3500,
          resourcesUsed: 0.4,
          confidence: 0.75
        }
      }
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur d\'automatisation des processus'
      }
    }
  }

  // Appeler l'API Manus/OpenAI
  private async callManusAI(params: {
    prompt: string
    maxTokens: number
  }): Promise<any> {
    if (!this.manusApiKey) {
      throw new Error('Cl√© API Manus non configur√©e')
    }

    try {
      // Simuler un appel √† l'API IA pour la d√©mo
      // En production, utiliser l'API OpenAI ou Manus r√©elle
      await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000))
      
      // Retourner des donn√©es simul√©es intelligentes
      return {
        insights: [
          'Tendance √† la hausse des plats v√©g√©tariens (+15%)',
          'Pic de demande les vendredis soirs (+40%)',
          'Pr√©f√©rence pour les plats √©pic√©s en saison s√®che'
        ],
        recommendations: [
          'Augmenter le stock de l√©gumes frais',
          'Optimiser les horaires de service',
          'Promouvoir les sp√©cialit√©s saisonni√®res'
        ],
        predictions: {
          nextWeekDemand: '+12%',
          popularDishes: ['Thieboudienne', 'Yassa Poulet', 'Maf√©'],
          optimalPricing: { 'Thieboudienne': 2800, 'Yassa Poulet': 2200 }
        },
        confidence: 0.85,
        culturalContext: 'west-africa'
      }
    } catch (error) {
      throw new Error(`Erreur API Manus: ${error}`)
    }
  }

  // M√©thodes de r√©cup√©ration de donn√©es (simul√©es)
  private async getSalesData(): Promise<any> {
    return {
      totalSales: 1250000,
      orderCount: 450,
      averageOrderValue: 2778,
      topDishes: ['Thieboudienne', 'Yassa Poulet', 'Maf√©'],
      period: 'last_7_days'
    }
  }

  private async getProductsData(): Promise<any> {
    return [
      { id: 1, name: 'Thieboudienne', currentPrice: 2500, cost: 1200, margin: 0.52 },
      { id: 2, name: 'Yassa Poulet', currentPrice: 2000, cost: 1000, margin: 0.50 },
      { id: 3, name: 'Maf√©', currentPrice: 2200, cost: 1100, margin: 0.50 }
    ]
  }

  private async getMarketData(): Promise<any> {
    return {
      competitorPrices: { 'Thieboudienne': 2800, 'Yassa Poulet': 2100 },
      seasonalFactors: { 'rice': 1.1, 'chicken': 0.95 },
      localPurchasingPower: 0.85
    }
  }

  private async getEquipmentData(): Promise<any> {
    return [
      { id: 'frigo-1', type: 'refrigerator', lastMaintenance: '2024-01-01', usage: 0.85 },
      { id: 'four-1', type: 'oven', lastMaintenance: '2024-01-15', usage: 0.92 }
    ]
  }

  private async getStockData(): Promise<any> {
    return [
      { item: 'riz', currentStock: 50, minStock: 20, avgConsumption: 15 },
      { item: 'poulet', currentStock: 30, minStock: 15, avgConsumption: 12 }
    ]
  }

  private async getBusinessData(): Promise<any> {
    return {
      revenue: 1250000,
      orders: 450,
      customers: 320,
      satisfaction: 4.2,
      period: 'week'
    }
  }

  private async getProcessData(): Promise<any> {
    return {
      orderProcessing: { avgTime: 15, bottlenecks: ['payment', 'kitchen'] },
      inventory: { updateFrequency: 'daily', automation: 'partial' },
      reporting: { frequency: 'weekly', automation: 'manual' }
    }
  }

  // Ex√©cuter les actions recommand√©es
  private async executeActions(actions: AgentAction[]): Promise<void> {
    for (const action of actions) {
      try {
        console.log(`üéØ Ex√©cution de l'action ${action.type} sur ${action.target}`)
        
        switch (action.type) {
          case 'notification':
            await this.sendNotification(action.target, action.payload)
            break
          case 'update':
            await this.updateData(action.target, action.payload)
            break
          case 'create':
            await this.createResource(action.target, action.payload)
            break
          case 'optimize':
            await this.optimizeProcess(action.target, action.payload)
            break
        }
      } catch (error) {
        console.error(`‚ùå Erreur lors de l'ex√©cution de l'action ${action.type}:`, error)
      }
    }
  }

  private async sendNotification(target: string, payload: any): Promise<void> {
    console.log(`üìß Notification envoy√©e √† ${target}:`, payload.title)
  }

  private async updateData(target: string, payload: any): Promise<void> {
    console.log(`üîÑ Mise √† jour de ${target} avec:`, payload)
  }

  private async createResource(target: string, payload: any): Promise<void> {
    console.log(`üìÑ Cr√©ation de ${target}:`, payload.type)
  }

  private async optimizeProcess(target: string, payload: any): Promise<void> {
    console.log(`‚ö° Optimisation de ${target}:`, payload)
  }

  // Ex√©cuter une t√¢che sp√©cifique
  private async executeTask(task: AgentTask): Promise<void> {
    task.status = 'running'
    task.startTime = new Date()

    try {
      const result = await this.executeAgent(task.agentId, task.input)
      task.status = result.success ? 'completed' : 'failed'
      task.output = result.data
      task.error = result.error
    } catch (error) {
      task.status = 'failed'
      task.error = error instanceof Error ? error.message : 'Erreur inconnue'
    }

    task.endTime = new Date()
  }

  // API publique pour ajouter des t√¢ches
  public addTask(task: Omit<AgentTask, 'id' | 'status'>): string {
    const taskId = `task_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    const fullTask: AgentTask = {
      ...task,
      id: taskId,
      status: 'pending'
    }
    
    this.taskQueue.push(fullTask)
    console.log(`üìã T√¢che ${taskId} ajout√©e √† la queue`)
    
    return taskId
  }

  // Obtenir le statut des agents
  public getAgentsStatus(): ManusAgent[] {
    return Array.from(this.agents.values())
  }

  // Obtenir les m√©triques du syst√®me
  public getSystemMetrics(): {
    totalAgents: number
    activeAgents: number
    totalTasks: number
    pendingTasks: number
    systemUptime: number
    averageSuccessRate: number
  } {
    const agents = Array.from(this.agents.values())
    const activeAgents = agents.filter(a => a.status === 'running').length
    const pendingTasks = this.taskQueue.filter(t => t.status === 'pending').length
    const avgSuccessRate = agents.reduce((sum, a) => sum + a.metrics.successRate, 0) / agents.length

    return {
      totalAgents: agents.length,
      activeAgents,
      totalTasks: this.taskQueue.length,
      pendingTasks,
      systemUptime: Date.now(), // Simplification pour la d√©mo
      averageSuccessRate: avgSuccessRate || 0
    }
  }
}

// Factory pour cr√©er le syst√®me d'agents
export function createManusAgentSystem(config?: {
  supabaseUrl?: string
  supabaseKey?: string
  manusApiKey?: string
}): ManusAgentSystem {
  return new ManusAgentSystem(config)
}

// Export des types et constantes
export { AFRICAN_AGENTS_CONFIG }
export type {
  ManusAgent,
  AgentTask,
  AgentResult,
  AgentAction,
  AgentMetrics
}

